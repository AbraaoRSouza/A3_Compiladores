lexer grammar Token;
INT: 'int';
DOUBLE: 'double';
STRING: 'string';
IF: 'if';
ELSE: 'else';
FOR: 'for';
WHILE: 'while';
PRINTF: 'printf';
SCANF: 'scanf';
ASSIGN: '=';
SEMICOLON: ';';
LPAREN: '(';
RPAREN: ')';
LBRACE: '{';
RBRACE: '}';
COMMA: ',';
PLUS: '+';
MINUS: '-';
TIMES: '*';
DIVIDE: '/';
AMPERSAND: '&';
POWER: '**';
OP_RELACIONAL: '>'|'<'|'>='|'<='|'!='|'==';
LETTER: [a-zA-Z_][a-zA-Z0-9_]*;
NUMBER: [0-9]+;
INCREASE: '++';
REDUCE: '--';
STRING_LITERAL: '"' .*? '"';
WS: [ \t\r\n]+ -> skip;
NUMBER_DECIMAL: [0-9]+('.'[0-9]+)?;